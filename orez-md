#!/usr/bin/python3
import sys
import yaml
from pygments import highlight
from pygments.lexers import CLexer
from pygments.lexers import CppLexer
from pygments.lexers import Python3Lexer
from pygments.lexers import SchemeLexer
from pygments.lexers import LuaLexer
from pygments.lexers import BashLexer
from pygments.lexers import MakefileLexer
from pygments.lexers import TexLexer
from pygments.lexers import GnuplotLexer
from pygments.lexers import TextLexer
from pygments.lexers import EmacsLispLexer
from pygments.formatters import HtmlFormatter

def orez_output(text):
    sys.stdout.write(text)

def orez_code_highlight(code, lexer):
    if code.isspace():
        return code
    n_chars = len(code)
    # 保留首部空白字符
    leading_spaces = ''
    for i in range(0, n_chars):
        if not code[i].isspace():
            leading_spaces = code[:i]
            break
    # 保留尾部空白字符
    trailing_spaces = ''
    for i in range(-1, -(n_chars + 1), -1):
        if not code[i].isspace():
            if i < -1:
                trailing_spaces = code[i+1:]
            break
    # 代码高亮
    code = code.strip()
    hl_code = highlight(code, lexer(), HtmlFormatter(nowrap=True))
    # 将 highlight 引入的首尾空白字符清除
    hl_code = hl_code.strip()
    # 将首部空白字符与尾部空白字符放回去
    hl_code = leading_spaces + hl_code + trailing_spaces
    return hl_code

def lang_mark_warn(snippet, info):
    sys.stderr.write("@ {0} # : ".format(snippet["name"].strip("'")))
    sys.stderr.write(info)
    sys.stderr.write('\n')

def format_snippet_reference(ref):
    name = ref["name"].strip("'")
    hash = ref["hash"]
    if "ids" in ref:
        orez_output('<span class="orez-callee-text"># %s @</span>' % name)
        for id in ref["ids"]:
            orez_output(' <a href="#%s%d">[%d]</a>' % (hash, id, id))
    else:
        orez_output('<a href="#%s" class="orez-callee-link"># %s @</a>' % (hash, name))

if __name__=="__main__":
    # 解析 yaml
    x = None
    if len(sys.argv) > 1:
        f = open(sys.argv[1])
        x = yaml.full_load(f)
        f.close()
    else:
        x = yaml.safe_load(sys.stdin)
    # 为代码高亮准备词法解析器的查找表
    lexers = {"c":CLexer, "c++":CppLexer, "python":Python3Lexer, 
              "scheme":SchemeLexer, "lua":LuaLexer, "tex":TexLexer, 
              "makefile":MakefileLexer, "gnuplot":GnuplotLexer,
              "plain":TextLexer, "elisp":EmacsLispLexer, "bash":BashLexer}
    for e in x:
        if e["type"] == 0:
            content = e["content"].strip("'")
            if len(content) > 0:
                orez_output(content)
                if e == x[-1]:
                    orez_output("\n")
                else:
                    orez_output("\n\n")
        elif e["type"] == 1:
            name = e["name"].strip("'") # 多行字串解析结果会保留包裹字符串的单引号
            hash = e["hash"] # 当行字符串解析结果不会出现包裹字符串的单引号……反正挺奇怪的。
            # pre begin
            if "id" in e:
                orez_output('<pre id="%s%d" class="orez-snippet-with-name">\n' % (hash, e["id"]))
            else:
                orez_output('<pre id="%s" class="orez-snippet-with-name">\n' % (hash))
            # format code fragment name
            orez_output('<span class="orez-snippet-name">@ ')
            orez_output(name)
            orez_output(' #</span>')
            # tag reference and operator
            if "operator" in e:
                if "tag_reference" in e:
                    tag_ref = e["tag_reference"]
                    tag_ref_name = tag_ref["name"].strip("'")
                    tag_ref_hash = hash + "-" + tag_ref["hash"]
                    orez_output('  <a class="orez-tag-reference" ')
                    orez_output('href="#{0}">&lt;{1}&gt;</a>'.format(tag_ref_hash, 
                                                                     tag_ref_name))
                orez_output('  <span class="orez-symbol">{0}</span>'.format(e["operator"]))
            # tag
            if "tag" in e:
                tag = e["tag"]
                tag_hash = hash + '-' + tag["hash"]
                orez_output('\n<span id="%s" class="orez-label">&lt;%s&gt;</span>'
                            % (tag_hash, tag["name"].strip("'")))
            # snippet content
            for p in e["content"]:
                if "text" in p:
                    lang = "plain"
                    text = p["text"].strip("'")
                    if "language" in e:
                        lang = e["language"].lower()
                        if lang not in lexers:
                            lang_mark_warn(e, "There is not lexer for me!")
                            lang = 'plain'
                    else:
                        lang_mark_warn(cf, "No language mark for me!")
                    lexer = lexers[lang]
                    hl_code = orez_code_highlight(text, lexer)
                    orez_output(hl_code)
                else:
                    format_snippet_reference(p["reference"])
                    orez_output('\n')
            
            # if last element is a piece of code snippet, 
            # a linebreak should be append
            if "text" in e["content"][-1]:
                orez_output('\n')
            # emissions 
            if "emissions" in e:
                for p in e["emissions"]:
                    emi = p["emission"]
                    # 由于要为 emi_name 增加了 '=> ' 前缀，若 emisi_name 为多行文本，为了美观，
                    # 那么每个换行符后需要增加三个空白字符作为 padding
                    emi_name = emi["name"].strip("'").replace('\n', '\n   ')
                    emi_hash = emi["hash"]
                    if "id" in emi:
                        emi_link = '<span class="orez-symbol">=&gt;</span> ' + \
                                   '<a href="#{0}{1}" class="proc-emissions-name">{2}</a>\n'
                        orez_output(emi_link.format(emi_hash, emi["id"], emi_name))
                    else:
                        emi_link = '<span class="orez-symbol">=&gt;</span> ' + \
                                   '<a href="#{0}" class="proc-emissions-name">{1}</a>\n'
                        orez_output(emi_link.format(emi_hash, emi_name))
            if e == x[-1]:
                orez_output("</pre>\n")
            else:
                orez_output("</pre>\n\n")
        else:
            sys.stderr.write("Unknown snippet type!")
